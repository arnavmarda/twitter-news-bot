{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#twitter-news-bot","title":"twitter-news-bot","text":"<p>A python API allowing users to:</p> <ol> <li>Scrape news articles from Google News.</li> <li>Extract the articles from the news sources.</li> <li>Create and post tweets(or now Xs) using <code>tweepy</code>.</li> <li>Leverage PaLM to generate summaries from articles as tweets and to generate tweets.</li> <li>Pipeline and automate the scraping and tweeting procedure using a <code>cron</code> job.</li> </ol>"},{"location":"#quick-start","title":"Quick Start","text":"<p>For complete documentation and examples, please refer to the documentation.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install twitter-news-bot\n</code></pre>"},{"location":"#requirements-before-using-the-api","title":"Requirements - before using the API","text":"<ol> <li> <p>To use the <code>tweepy</code> API to post tweets, you must have a Twitter developer account and create an app. You can create an app here. Don't worry, Twitter gives you 1 free app. Once you have created an app, you will need to generate the following keys and tokens:</p> <ul> <li>Consumer API key</li> <li>Consumer API secret key</li> <li>Access token</li> <li>Access token secret</li> </ul> </li> <li> <p>To use PaLM to generate tweets and completely automate the process, you will need to generate a PaLM API. To get this, you will need to sign up for the waitlist here. You can then generate the API key.</p> </li> </ol> <p>These keys must be stored in a <code>.env</code> file in the root directory of your project. The <code>.env</code> file should look like this: <pre><code>API_KEY=\"your-key-here\"\nAPI_SECRET_KEY=\"your-key-here\"\nACCESS_TOKEN=\"your-key-here\"\nACCESS_TOKEN_SECRET=\"your-key-here\"\nGOOGLE_API_KEY=\"your-key-here\"\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<p>The API is very simple to use. Here is a quick example: <pre><code>from twitter_news_bot.tweeter import Tweeter\nfrom twitter_news_bot.newsfinder import NewsFinder\nfrom twitter_news_bot.twitternewsbot import TwitterNewsBot\n# Create a NewsFinder and Tweeter Object\nnf = NewsFinder()\nt = Tweeter()\n# Create a TwitterNewsBot object\ntnb = TwitterNewsBot(nf, t, topic=\"AI\")\n# Run the TwitterNewsBOt to scrape articles, extract them, summarize them and post them as tweets\ntnb.run()\n</code></pre></p>"},{"location":"#future-updates","title":"Future Updates","text":"<ul> <li> Add support for other summarization models such as OpenAI.</li> <li> Add region based searching for news articles on Google News.</li> </ul>"},{"location":"commands/","title":"Command Line Interface Commands","text":""},{"location":"commands/#twitternewsbot","title":"twitternewsbot","text":"<p>The main command for the CLI.</p> <p>Usage: <pre><code>twitternewsbot COMMAND [ARGS]...\n</code></pre></p>"},{"location":"commands/#build-yaml","title":"build-yaml","text":"<p>Build a .yaml file for Github Actions to run the cron job</p> <p>Usage:  <pre><code>twitternewsbot build-yaml CRON FILENAME\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>CRON</code>: str - Cron expression for the job</li> <li><code>FILENAME</code>: str - Name of the file of the script to run</li> </ul>"},{"location":"github-actions/","title":"Using Github-Actions","text":""},{"location":"github-actions/#introduction","title":"Introduction","text":"<p>GitHub Actions are an essential part of GitHub's continuous integration and continuous deployment (CI/CD) platform. They allow you to automate various tasks, workflows, and processes directly within your GitHub repositories. With GitHub Actions, you can set up automated build, test, release, and deployment pipelines, enabling you to streamline your software development workflows and improve collaboration among team members.</p> <p>Here's an explanation of GitHub Actions concepts and how they work, along with some examples in Markdown:</p>"},{"location":"github-actions/#workflows","title":"Workflows","text":"<p>A workflow is a series of automated steps that are executed when specific events occur in your GitHub repository, such as a push to the repository, a pull request, or a new release. Workflows are defined in the <code>.github/workflows</code> directory in your repository, and they are written in YAML format.</p> <p>Example workflow that runs automated tests on every push to the <code>main</code> branch: <pre><code>name: Automated Tests\non:\npush:\nbranches:\n- main\njobs:\ntest:\nname: Run Tests\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout code\nuses: actions/checkout@v2\n- name: Setup Node.js\nuses: actions/setup-node@v2\nwith:\nnode-version: '14'\n- name: Install dependencies\nrun: npm install\n- name: Run tests\nrun: npm test\n</code></pre></p>"},{"location":"github-actions/#jobs","title":"Jobs","text":"<p>A job is a set of steps that run sequentially on the same runner. A workflow can have one or more jobs that run concurrently or sequentially, depending on the configuration.</p> <p>Example job that builds the application, creates a production build, and then deploys it to a hosting service: <pre><code>jobs:\nbuild-and-deploy:\nname: Build and Deploy\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout code\nuses: actions/checkout@v2\n- name: Setup Node.js\nuses: actions/setup-node@v2\nwith:\nnode-version: '12'\n- name: Install dependencies\nrun: npm install\n- name: Build\nrun: npm run build\n- name: Deploy\nrun: npm run deploy\n</code></pre></p>"},{"location":"github-actions/#steps","title":"Steps","text":"<p>Steps are individual tasks within a job. They represent the commands that will be executed on the runner.</p> <p>Example step that installs dependencies: <pre><code>steps:\n- name: Install Dependencies\nrun: npm install\n</code></pre></p>"},{"location":"github-actions/#actions","title":"Actions","text":"<p>Actions are reusable units of code that can be used in steps. They encapsulate specific functionality and can be shared across multiple workflows and repositories.</p> <p>Example action that sets up Node.js environment for the job: <pre><code>steps:\n- name: Setup Node.js\nuses: actions/setup-node@v2\nwith:\nnode-version: '14'\n</code></pre></p> <p>GitHub Actions provide a flexible and powerful automation platform that can significantly improve your development workflows, and you can find a wide range of community-contributed actions in the GitHub Marketplace to further enhance your automation capabilities.</p>"},{"location":"github-actions/#using-github-actions-to-automate-the-twitter-news-bot","title":"Using GitHub Actions to automate the Twitter News Bot","text":""},{"location":"github-actions/#cron-jobs","title":"Cron-Jobs","text":"<p>Cron-jobs are a time-based job scheduler in Unix-like computer operating systems. The name cron comes from the word \"chronos\", Greek for \"time\". Cron-jobs are used to schedule jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals. It typically automates system maintenance or administration\u2014though its general-purpose nature makes it useful for things like downloading files from the Internet and downloading email at regular intervals.</p> <p>Cron-jobs are composed of two parts: a cron expression and a shell command to execute. The cron expression is a string of five numbers separated by spaces. Each number represents a time unit (minutes, hours, days, months, years) and is followed by a slash and a number that indicates how often the command should be executed. For example, the cron expression <code>0 0 * * *</code> means that the command should be executed every day at midnight.</p> <p>Cron-jobs prove extremely useful for a Twitter news bot as we can use cron-jobs to schedule our script to scrape, summarize and post news blasts on twitter at particular times or intervals of the day. We now describe how to use Github-actions with cron-jobs to automatically schedule your customized tweets.</p>"},{"location":"github-actions/#setting-up-the-workflow","title":"Setting up the workflow","text":"<p>A necessary pre-requisite for using github-actions would be to have a github account. If you do not have one, you can create one here. </p> <p>To run github-actions, your script must be stored in a github repository. To create a repository, you can follow the steps here.</p> <p>Once you have created a repository, you need to add your script to the repository by importing the twitter-news-bot library and building the script. </p> <p>Now, you have to create a <code>.yml</code> file in the <code>.github/workflows</code> directory of your repository. Luckily, the package provides a command for this. You can run the following command in the root directory of your project: <pre><code>twitternewsbot build-yaml CRON FILENAME\n</code></pre> where <code>CRON</code> is the cron expression and <code>FILENAME</code> is the name of the python script you have created. You can use this to help you build cron expressions. For example, if you want to run the script in <code>main.py</code> every day at 12:00 AM, you can run: <pre><code>twitternewsbot build-yaml \"0 0 * * *\" \"main.py\"\n</code></pre></p> <p>This will create a <code>.yml</code> file in the <code>.github/workflows</code> directory of your repository. You can now commit and push the changes to your repository. This should create a github-action tweeting your news blasts at the specified time.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-the-package","title":"Installing the package","text":"<p>The fastest and easiest way to install the package is using <code>pip</code>: <pre><code>pip install twitternewsbot\n</code></pre> The <code>pip</code> package usually comes installed with python but if you do not have it, you can install it from here.</p> <p>You can also install the package by downloading the source code available here.</p> <p>Moreover, you can also <code>git clone</code> the repository: <pre><code>git clone https://github.com/arnavmarda/twitter-news-bot.git\n</code></pre></p>"},{"location":"installation/#setting-up-the-env-file","title":"Setting up the .env file","text":"<p>Note - This step is optional. You can also pass the keys and tokens directly to the API. This will not work for the <code>pip</code> installation.</p> <p>twitter-news-bot uses the <code>tweepy</code> API to post tweets and leverages Google PaLM to generate summaries and tweets. To use these APIs, you will need to generate keys and tokens.</p> <p>These keys and tokens are stored and read from the <code>.env</code> file in the root directory of your project.</p> <p>You can create the file using your IDE or file explorer or simply running the following command in the root directory of your project: <pre><code>touch .env\n</code></pre></p> <p>The API keys must be stored in the <code>.env</code> file as such: <pre><code>API_KEY=\"your-key-here\"\nAPI_SECRET_KEY=\"your-key-here\"\nACCESS_TOKEN=\"your-key-here\"\nACCESS_TOKEN_SECRET=\"your-key-here\"\nGOOGLE_API_KEY=\"your-key-here\"\n</code></pre></p>"},{"location":"installation/#getting-the-api-keys-and-tokens","title":"Getting the API keys and tokens","text":"<ol> <li> <p>To use the <code>tweepy</code> API to post tweets, you must have a Twitter developer account and create an app. You can create an app here. Don't worry, Twitter gives you 1 free app. Once you have created an app, you will need to generate the following keys and tokens:</p> <ul> <li>Consumer API key</li> <li>Consumer API secret key</li> <li>Access token</li> <li>Access token secret</li> </ul> </li> <li> <p>To use PaLM to generate tweets and completely automate the process, you will need to generate a PaLM API. To get this, you will need to sign up for the waitlist here. You can then generate the API key.</p> </li> </ol>"},{"location":"installation/#package-requirements","title":"Package Requirements","text":"<p>If you are using the <code>pip</code> installation, you do not need to worry about the package requirements. However, if you are using the source code, you will need to install the following packages by running: <pre><code>pip install -r requirements.txt\n</code></pre> The tech stack used in this project includes the following open-source libraries: - tweepy - python-dotenv - requests - requests-html - validators - cron-validator - google-generativeai</p>"},{"location":"newsfinder/","title":"News Finder Class","text":""},{"location":"newsfinder/#twitternewsbot.newsfinder.NewsFinder","title":"NewsFinder","text":"<p>API Object to scrape news articles from Google News and scrape the article text from the news website.  Allows filtering of Google News results.</p> <p>Note: Due to issues with scraping, Daily Mail and News18 are blocked by default. You can unblock them by calling the remove_blocked_source method but this is not advised.</p> ATTRIBUTE DESCRIPTION <code>blocked_sources</code> <p>A list of sources to block, by default includes Daily Mail and News18</p> <p> TYPE: <code>list</code> </p> Source code in <code>twitternewsbot/newsfinder.py</code> <pre><code>class NewsFinder():\n\"\"\"\n    API Object to scrape news articles from Google News and scrape the article text from the news website. \n    Allows filtering of Google News results.\n    Note: Due to issues with scraping, Daily Mail and News18 are blocked by default. You can unblock them by calling the remove_blocked_source method but this is not advised.\n    Attributes\n    ----------\n    blocked_sources : list\n        A list of sources to block, by default includes Daily Mail and News18\n    \"\"\"\n#####################################\n# Initialization\n#####################################\ndef __init__(self, blocked_sources: list|None = None):\n\"\"\"Initialize the NewsFinder class\n        Parameters\n        ----------\n        blocked_sources : list, optional\n            A list of sources to block, by default includes Daily Mail and News18        \n        Raises\n        ------\n        TypeError\n            If blocked_sources is not a list\n        TypeError\n            If any element in blocked_sources is not a string    \n        \"\"\"\nif blocked_sources is None:\nself.blocked_sources = [\"Daily Mail\", \"News18\"]\nelse:\n# Check if blocked_sources is valid\nif not isinstance(blocked_sources, list):\nraise TypeError(\"blocked_sources must be a list\")\n# Check if all elements in blocked_sources are strings\nif not all(isinstance(source, str) for source in blocked_sources):\nraise TypeError(\"blocked_sources must be a list of strings\")\nself.blocked_sources = blocked_sources + [\"Daily Mail\", \"News18\"]\n#####################################\n# Private Methods\n#####################################\ndef __scrape_articles(self, url: str, number_of_articles: int = 5) -&gt; list | None:\n\"\"\"Private: Scrape the news articles from Google News for a given topic\n        Parameters\n        ----------\n        url : str\n            The google news url to scrape\n        number_of_articles : int, optional \n            The number of articles to scrape, by default 5\n        Returns\n        -------\n        all_articles : list\n            A list of dictionaries containing the title, source, time and link of each article\n        \"\"\"\n# Initialize an HTML Session\nsession = HTMLSession()\n# Get the page\nr = session.get(url=url)\n# Get all the articles\ntry:\narticles = r.html.find('article')\nexcept:\nreturn None\nall_articles = []\n# Iterate over each article\nfor article in articles:\n# Break if we have enough articles\nif len(all_articles) == number_of_articles:\nbreak\n# Get the title\ntitle = article.find('h3', first=True).text\n# Get the source\nsource = article.find('img', first=True).attrs.get('alt')\n# Disallow certain sources\nif source in self.blocked_sources:\ncontinue\n# Get the link\nlink = article.find('a', first=True).absolute_links.pop()\n# Print the details\nnewsarticle = {\n'title': title,\n'source': source,\n'link': link\n}\nall_articles.append(newsarticle)\nreturn all_articles\ndef __scrape_news_article(self, url: str) -&gt; dict | None:\n\"\"\"Private: Scrape the news article from the given url\n        Parameters\n        ----------\n        url : str\n            The google news url of the news article\n        Returns\n        -------\n        article : dict\n            A dictionary containing the title and article body of the news article\n        \"\"\"\n# Final url\ntry:\nurl = requests.get(url, timeout=5).url\nexcept Exception as error:\nwarnings.warn(f\"Error processing url: {url}. Continuing without it...\")\nreturn None\n# Initialize HTML Session\nsession = HTMLSession()\n# Get the page\nr = session.get(url=url)\n# Get the title\ntry:\ntitle  = r.html.find('h1', first=True).text\nexcept:\ntitle = \"\"\n# Get all article fragments (each fragment is a paragraph)\ntry:\narticle_fragments = r.html.find('p')\nexcept:\nwarnings.warn(f\"Article with url: {url} cannot be scraped. Continuing without it...\")\nreturn None\n# Join all the paragraphs to form the article\nbody = '\\n'.join([fragment.text for fragment in article_fragments])\nreturn {'title': title, 'article': body}\ndef __build_list_of_articles(self, articles_list: list) -&gt; list:\n\"\"\"Private: Build a list of articles from the given list of dictionaries\n        Parameters\n        ----------\n        articles_list : list(dict)\n            A list of dictionaries containing the title, source, date and link of the articles\n        Returns\n        -------\n        articles_full_text : list\n            A list of dictionaries containing the title and article body of the news articles\n        \"\"\"\n# Iterate through articles, and scrape each one\nfor article in articles_list:\narticle_text = self.__build_article_from_dict(article)\narticle.update(article_text)\nreturn articles_list\ndef __build_article_from_dict(self, article_dict: dict) -&gt; dict | None:\n\"\"\"Private: Build the article from the given dictionary\n        Parameters\n        ----------\n        article_dict : dict\n            A dictionary containing the title, source, date and link of the article\n        Returns\n        -------\n        article : dict\n            A dictionary containing the title and article body of the news article\n        \"\"\"\nreturn self.__scrape_news_article(article_dict['link'])\ndef __build_url(self, topic_url: str, source_url: str, period_url: str) -&gt; str:\n\"\"\"Private: Build the url for the given topic, source and period\n        Parameters\n        ----------\n        topic_url : str\n            The topic to search for\n        source_url : str\n            The url fragment of the source to search for\n        period_url : str\n            The url fragment of the period to search for\n        Returns \n        -------\n        url : str\n            The url to scrape\n        \"\"\"\nreturn f'https://news.google.com/search?q={topic_url}{source_url}{period_url}&amp;hl=en-IN&amp;gl=IN&amp;ceid=IN:en'\n###############################\n# Public Methods - API Methods\n###############################\ndef add_blocked_source(self, sources: list) -&gt; int:\n\"\"\"Add a list of sources to block\n        Parameters\n        ----------\n        sources : list\n            A list of sources to block\n        Returns\n        -------\n        int\n            The number of blocked sources\n        Raises\n        ------\n        TypeError\n            If sources is not a list\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; nf = NewsFinder() \n        &gt;&gt;&gt; nf.add_blocked_source([\"BBC\"]) # Add BBC to the list of blocked sources\n        3\n        \"\"\"\n# Check if the sources is valid\nif not isinstance(sources, list):\nraise TypeError(\"Sources must be a list\")\n# Check if the source is already blocked\nfor source in sources:\nif source in self.blocked_sources:\nsources.remove(source)\nself.blocked_sources = self.blocked_sources + sources\nreturn len(self.blocked_sources)\ndef remove_blocked_source(self, sources: list) -&gt; int:\n\"\"\"Remove a list of sources to block\n        Parameters\n        ----------\n        sources : list\n            A list of sources to block\n        Returns\n        -------\n        int\n            The number of blocked sources\n        Raises\n        ------\n        TypeError\n            If sources is not a list\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; nf = NewsFinder()\n        &gt;&gt;&gt; nf.remove_blocked_source([\"Daily Mail\"]) # Remove Daily Mail from the list of blocked sources\n        1\n        \"\"\"\n# Check if the sources is valid\nif not isinstance(sources, list):\nraise TypeError(\"Sources must be a list\")\nfor source in sources:\nself.blocked_sources.remove(source)\nreturn len(self.blocked_sources)\ndef get_blocked_sources(self) -&gt; list:\n\"\"\"Get the list of blocked sources\n        Returns\n        -------\n        list\n            The list of blocked sources\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; nf = NewsFinder()\n        &gt;&gt;&gt; nf.get_blocked_sources() # Remember, Daily Mail and News18 are blocked by default (due to issues with scraping)\n        ['Daily Mail', 'News18']\n        \"\"\"\nreturn self.blocked_sources\n@property\ndef blocked_sources(self) -&gt; list:\n\"\"\"Get the list of blocked sources\n        Returns\n        -------\n        list\n            The list of blocked sources\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; nf = NewsFinder()\n        &gt;&gt;&gt; nf.blocked_sources # Remember, Daily Mail and News18 are blocked by default (due to issues with scraping)\n        ['Daily Mail', 'News18']\n        \"\"\"\nreturn self.__blocked_sources\n@blocked_sources.setter\ndef blocked_sources(self, sources: list) -&gt; None:\n\"\"\"Set the list of blocked sources\n        Parameters\n        ----------\n        sources : list\n            A list of sources to block\n        Raises\n        ------\n        TypeError\n            If sources is not a list\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; nf = NewsFinder()\n        &gt;&gt;&gt; nf.blocked_sources = [\"BBC\"] # Set the list of blocked sources to BBC\n        \"\"\"\n# Check if the sources is valid\nif not isinstance(sources, list):\nraise TypeError(\"sources must be a list\")\nself.__blocked_sources = sources\ndef update_blocked_sources(self, sources: list) -&gt; int:\n\"\"\"Update the list of blocked sources by completely replacing existing blocked sources\n        Parameters\n        ----------\n        sources : list\n            A list of sources to block\n        Returns\n        -------\n        int\n            The number of blocked sources\n        Raises\n        ------\n        TypeError\n            If sources is not a list\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; nf = NewsFinder()\n        &gt;&gt;&gt; nf.update_blocked_sources([\"BBC\"]) # Update the list of blocked sources to BBC\n        1\n        \"\"\"\n# Check if the sources is valid\nif not isinstance(sources, list):\nraise TypeError(\"Sources must be a list\")\nself.blocked_sources = sources\nreturn len(self.blocked_sources)\ndef get_news_articles(self, topic: str|None = None, number_of_articles: int|None = None, source: str|None = None, period: str = \"Any time\", article_text: bool = False) -&gt; list:\n\"\"\"Get the news articles for a given topic or for a given source filtered by date\n        Parameters\n        ----------\n        topic : str, optional\n            The topic to search for, by default None\n        number_of_articles : int, optional\n            The number of articles to scrape, by default None which gives all the possible articles\n        source : str, optional\n            The domain for the website of the source to search for, by default None. For example, \"dailymail.co.uk\" or \"bbc.com\"\n        period : list, optional\n            The period to search for, by default \"Any time\". Period must be one of [\"Any time\", \"Past hour\", \"Past 24 hours\", \"Past week\", \"Past year\"]\n        article_text : bool, optional\n            Whether to scrape the article text or not, by default False\n        Returns\n        -------\n        list\n            A list of dictionaries containing the title, source, link and article body of the news articles (only if article_text is True)\n        Raises\n        ------\n        ValueError\n            If the period is not one of [\"Any time\", \"Past hour\", \"Past 24 hours\", \"Past week\", \"Past year\"].\n        ValueError\n            If the number_of_articles is not a positive integer\n        TypeError\n            If the topic is not a string\n        TypeError\n            If the source is not a string\n        ValueError\n            If the source is not a valid domain name\n        TypeError\n            If the article_text is not a boolean\n        ValueError\n            If the topic and source are both None\n        Examples\n        --------\n        Retrieving all articles for a given topic in the last 24 hours without scraping.\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; nf = NewsFinder()\n        &gt;&gt;&gt; nf.get_news_articles(topic=\"Donald Trump\", period=\"Past 24 hours\")\n        Retrieving all articles for a given topic in the last 24 hours and scraping the article text.\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; nf = NewsFinder()\n        &gt;&gt;&gt; nf.get_news_articles(topic=\"Donald Trump\", period=\"Past 24 hours\", article_text=True)\n        Retrieving 5 articles from a given source in the last week without scraping.\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; nf = NewsFinder()\n        &gt;&gt;&gt; nf.get_news_articles(source=\"bbc.com\", period=\"Past week\", number_of_articles=5)\n        \"\"\"\n# Check if the period is valid\nif period not in [\"Any time\", \"Past hour\", \"Past 24 hours\", \"Past week\", \"Past year\"]:\nraise ValueError(\"period must be one of ['Any time', 'Past hour', 'Past 24 hours', 'Past week', 'Past year']\")\n# Check if the number of articles is valid\nif number_of_articles is not None and number_of_articles &lt;= 0:\nraise ValueError(\"number_of_articles must be a positive integer\")\n# Check if the topic is valid\nif topic is not None and not isinstance(topic, str):\nraise TypeError(\"topic must be a string\")\n# Check if the source is valid\nif source is not None and not isinstance(source, str):\nraise TypeError(\"source must be a string\")\nif source is not None and not domain(source):\nraise ValueError(\"source must be a valid domain name\")\n# Check if the article_text is valid\nif not isinstance(article_text, bool):\nraise TypeError(\"article_text must be a boolean\")\n# Check if the topic and source are both None\nif topic is None and source is None:\nraise ValueError(\"Either or both topic and source must be provided\")\n################### Build url ######################\n# If topic is provided\nif topic is not None:\ntopic_url = topic + \" \"\nelse:\ntopic_url = \"\"\n# If source is provided\nif source is not None:\nsource_url = \" site:\" + source\nelse:\nsource_url = \"\"\n# If period is provided\nperiod_mappings = {\"Any time\": \"\",\n\"Past hour\": \" when:1h\",\n\"Past 24 hours\": \" when:1d\",\n\"Past week\": \" when:7d\",\n\"Past year\": \" when:1y\"}\nperiod_url = period_mappings[period]\nurl = self.__build_url(topic_url, source_url, period_url)\n################### Scrape ######################\narticles = self.__scrape_articles(url, number_of_articles)\n# Check and report if no articles found\nif articles is None:\nsys.stdout.write(\"No articles found. Try different parameters\")\nreturn []\n################### Build Articles ######################\nif article_text:\narticles = self.__build_list_of_articles(articles)\nreturn articles\n</code></pre>"},{"location":"newsfinder/#twitternewsbot.newsfinder.NewsFinder.blocked_sources","title":"blocked_sources  <code>property</code> <code>writable</code>","text":"<pre><code>blocked_sources: list\n</code></pre> <p>Get the list of blocked sources</p> RETURNS DESCRIPTION <code>list</code> <p>The list of blocked sources</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; nf = NewsFinder()\n&gt;&gt;&gt; nf.blocked_sources # Remember, Daily Mail and News18 are blocked by default (due to issues with scraping)\n['Daily Mail', 'News18']\n</code></pre>"},{"location":"newsfinder/#twitternewsbot.newsfinder.NewsFinder.add_blocked_source","title":"add_blocked_source","text":"<pre><code>add_blocked_source(sources)\n</code></pre> <p>Add a list of sources to block</p> PARAMETER  DESCRIPTION <code>sources</code> <p>A list of sources to block</p> <p> TYPE: <code>list</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The number of blocked sources</p> RAISES DESCRIPTION <code>TypeError</code> <p>If sources is not a list</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; nf = NewsFinder() \n&gt;&gt;&gt; nf.add_blocked_source([\"BBC\"]) # Add BBC to the list of blocked sources\n3\n</code></pre> Source code in <code>twitternewsbot/newsfinder.py</code> <pre><code>def add_blocked_source(self, sources: list) -&gt; int:\n\"\"\"Add a list of sources to block\n    Parameters\n    ----------\n    sources : list\n        A list of sources to block\n    Returns\n    -------\n    int\n        The number of blocked sources\n    Raises\n    ------\n    TypeError\n        If sources is not a list\n    Examples\n    --------\n    &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n    &gt;&gt;&gt; nf = NewsFinder() \n    &gt;&gt;&gt; nf.add_blocked_source([\"BBC\"]) # Add BBC to the list of blocked sources\n    3\n    \"\"\"\n# Check if the sources is valid\nif not isinstance(sources, list):\nraise TypeError(\"Sources must be a list\")\n# Check if the source is already blocked\nfor source in sources:\nif source in self.blocked_sources:\nsources.remove(source)\nself.blocked_sources = self.blocked_sources + sources\nreturn len(self.blocked_sources)\n</code></pre>"},{"location":"newsfinder/#twitternewsbot.newsfinder.NewsFinder.remove_blocked_source","title":"remove_blocked_source","text":"<pre><code>remove_blocked_source(sources)\n</code></pre> <p>Remove a list of sources to block</p> PARAMETER  DESCRIPTION <code>sources</code> <p>A list of sources to block</p> <p> TYPE: <code>list</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The number of blocked sources</p> RAISES DESCRIPTION <code>TypeError</code> <p>If sources is not a list</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; nf = NewsFinder()\n&gt;&gt;&gt; nf.remove_blocked_source([\"Daily Mail\"]) # Remove Daily Mail from the list of blocked sources\n1\n</code></pre> Source code in <code>twitternewsbot/newsfinder.py</code> <pre><code>def remove_blocked_source(self, sources: list) -&gt; int:\n\"\"\"Remove a list of sources to block\n    Parameters\n    ----------\n    sources : list\n        A list of sources to block\n    Returns\n    -------\n    int\n        The number of blocked sources\n    Raises\n    ------\n    TypeError\n        If sources is not a list\n    Examples\n    --------\n    &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n    &gt;&gt;&gt; nf = NewsFinder()\n    &gt;&gt;&gt; nf.remove_blocked_source([\"Daily Mail\"]) # Remove Daily Mail from the list of blocked sources\n    1\n    \"\"\"\n# Check if the sources is valid\nif not isinstance(sources, list):\nraise TypeError(\"Sources must be a list\")\nfor source in sources:\nself.blocked_sources.remove(source)\nreturn len(self.blocked_sources)\n</code></pre>"},{"location":"newsfinder/#twitternewsbot.newsfinder.NewsFinder.get_blocked_sources","title":"get_blocked_sources","text":"<pre><code>get_blocked_sources()\n</code></pre> <p>Get the list of blocked sources</p> RETURNS DESCRIPTION <code>list</code> <p>The list of blocked sources</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; nf = NewsFinder()\n&gt;&gt;&gt; nf.get_blocked_sources() # Remember, Daily Mail and News18 are blocked by default (due to issues with scraping)\n['Daily Mail', 'News18']\n</code></pre> Source code in <code>twitternewsbot/newsfinder.py</code> <pre><code>def get_blocked_sources(self) -&gt; list:\n\"\"\"Get the list of blocked sources\n    Returns\n    -------\n    list\n        The list of blocked sources\n    Examples\n    --------\n    &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n    &gt;&gt;&gt; nf = NewsFinder()\n    &gt;&gt;&gt; nf.get_blocked_sources() # Remember, Daily Mail and News18 are blocked by default (due to issues with scraping)\n    ['Daily Mail', 'News18']\n    \"\"\"\nreturn self.blocked_sources\n</code></pre>"},{"location":"newsfinder/#twitternewsbot.newsfinder.NewsFinder.update_blocked_sources","title":"update_blocked_sources","text":"<pre><code>update_blocked_sources(sources)\n</code></pre> <p>Update the list of blocked sources by completely replacing existing blocked sources</p> PARAMETER  DESCRIPTION <code>sources</code> <p>A list of sources to block</p> <p> TYPE: <code>list</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The number of blocked sources</p> RAISES DESCRIPTION <code>TypeError</code> <p>If sources is not a list</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; nf = NewsFinder()\n&gt;&gt;&gt; nf.update_blocked_sources([\"BBC\"]) # Update the list of blocked sources to BBC\n1\n</code></pre> Source code in <code>twitternewsbot/newsfinder.py</code> <pre><code>def update_blocked_sources(self, sources: list) -&gt; int:\n\"\"\"Update the list of blocked sources by completely replacing existing blocked sources\n    Parameters\n    ----------\n    sources : list\n        A list of sources to block\n    Returns\n    -------\n    int\n        The number of blocked sources\n    Raises\n    ------\n    TypeError\n        If sources is not a list\n    Examples\n    --------\n    &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n    &gt;&gt;&gt; nf = NewsFinder()\n    &gt;&gt;&gt; nf.update_blocked_sources([\"BBC\"]) # Update the list of blocked sources to BBC\n    1\n    \"\"\"\n# Check if the sources is valid\nif not isinstance(sources, list):\nraise TypeError(\"Sources must be a list\")\nself.blocked_sources = sources\nreturn len(self.blocked_sources)\n</code></pre>"},{"location":"newsfinder/#twitternewsbot.newsfinder.NewsFinder.get_news_articles","title":"get_news_articles","text":"<pre><code>get_news_articles(topic=None, number_of_articles=None, source=None, period='Any time', article_text=False)\n</code></pre> <p>Get the news articles for a given topic or for a given source filtered by date</p> PARAMETER  DESCRIPTION <code>topic</code> <p>The topic to search for, by default None</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>number_of_articles</code> <p>The number of articles to scrape, by default None which gives all the possible articles</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>source</code> <p>The domain for the website of the source to search for, by default None. For example, \"dailymail.co.uk\" or \"bbc.com\"</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>period</code> <p>The period to search for, by default \"Any time\". Period must be one of [\"Any time\", \"Past hour\", \"Past 24 hours\", \"Past week\", \"Past year\"]</p> <p> TYPE: <code>list</code> DEFAULT: <code>'Any time'</code> </p> <code>article_text</code> <p>Whether to scrape the article text or not, by default False</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>list</code> <p>A list of dictionaries containing the title, source, link and article body of the news articles (only if article_text is True)</p> RAISES DESCRIPTION <code>ValueError</code> <p>If the period is not one of [\"Any time\", \"Past hour\", \"Past 24 hours\", \"Past week\", \"Past year\"].</p> <code>ValueError</code> <p>If the number_of_articles is not a positive integer</p> <code>TypeError</code> <p>If the topic is not a string</p> <code>TypeError</code> <p>If the source is not a string</p> <code>ValueError</code> <p>If the source is not a valid domain name</p> <code>TypeError</code> <p>If the article_text is not a boolean</p> <code>ValueError</code> <p>If the topic and source are both None</p> <p>Examples:</p> <p>Retrieving all articles for a given topic in the last 24 hours without scraping.</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; nf = NewsFinder()\n&gt;&gt;&gt; nf.get_news_articles(topic=\"Donald Trump\", period=\"Past 24 hours\")\n</code></pre> <p>Retrieving all articles for a given topic in the last 24 hours and scraping the article text.</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; nf = NewsFinder()\n&gt;&gt;&gt; nf.get_news_articles(topic=\"Donald Trump\", period=\"Past 24 hours\", article_text=True)\n</code></pre> <p>Retrieving 5 articles from a given source in the last week without scraping.</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; nf = NewsFinder()\n&gt;&gt;&gt; nf.get_news_articles(source=\"bbc.com\", period=\"Past week\", number_of_articles=5)\n</code></pre> Source code in <code>twitternewsbot/newsfinder.py</code> <pre><code>def get_news_articles(self, topic: str|None = None, number_of_articles: int|None = None, source: str|None = None, period: str = \"Any time\", article_text: bool = False) -&gt; list:\n\"\"\"Get the news articles for a given topic or for a given source filtered by date\n    Parameters\n    ----------\n    topic : str, optional\n        The topic to search for, by default None\n    number_of_articles : int, optional\n        The number of articles to scrape, by default None which gives all the possible articles\n    source : str, optional\n        The domain for the website of the source to search for, by default None. For example, \"dailymail.co.uk\" or \"bbc.com\"\n    period : list, optional\n        The period to search for, by default \"Any time\". Period must be one of [\"Any time\", \"Past hour\", \"Past 24 hours\", \"Past week\", \"Past year\"]\n    article_text : bool, optional\n        Whether to scrape the article text or not, by default False\n    Returns\n    -------\n    list\n        A list of dictionaries containing the title, source, link and article body of the news articles (only if article_text is True)\n    Raises\n    ------\n    ValueError\n        If the period is not one of [\"Any time\", \"Past hour\", \"Past 24 hours\", \"Past week\", \"Past year\"].\n    ValueError\n        If the number_of_articles is not a positive integer\n    TypeError\n        If the topic is not a string\n    TypeError\n        If the source is not a string\n    ValueError\n        If the source is not a valid domain name\n    TypeError\n        If the article_text is not a boolean\n    ValueError\n        If the topic and source are both None\n    Examples\n    --------\n    Retrieving all articles for a given topic in the last 24 hours without scraping.\n    &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n    &gt;&gt;&gt; nf = NewsFinder()\n    &gt;&gt;&gt; nf.get_news_articles(topic=\"Donald Trump\", period=\"Past 24 hours\")\n    Retrieving all articles for a given topic in the last 24 hours and scraping the article text.\n    &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n    &gt;&gt;&gt; nf = NewsFinder()\n    &gt;&gt;&gt; nf.get_news_articles(topic=\"Donald Trump\", period=\"Past 24 hours\", article_text=True)\n    Retrieving 5 articles from a given source in the last week without scraping.\n    &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n    &gt;&gt;&gt; nf = NewsFinder()\n    &gt;&gt;&gt; nf.get_news_articles(source=\"bbc.com\", period=\"Past week\", number_of_articles=5)\n    \"\"\"\n# Check if the period is valid\nif period not in [\"Any time\", \"Past hour\", \"Past 24 hours\", \"Past week\", \"Past year\"]:\nraise ValueError(\"period must be one of ['Any time', 'Past hour', 'Past 24 hours', 'Past week', 'Past year']\")\n# Check if the number of articles is valid\nif number_of_articles is not None and number_of_articles &lt;= 0:\nraise ValueError(\"number_of_articles must be a positive integer\")\n# Check if the topic is valid\nif topic is not None and not isinstance(topic, str):\nraise TypeError(\"topic must be a string\")\n# Check if the source is valid\nif source is not None and not isinstance(source, str):\nraise TypeError(\"source must be a string\")\nif source is not None and not domain(source):\nraise ValueError(\"source must be a valid domain name\")\n# Check if the article_text is valid\nif not isinstance(article_text, bool):\nraise TypeError(\"article_text must be a boolean\")\n# Check if the topic and source are both None\nif topic is None and source is None:\nraise ValueError(\"Either or both topic and source must be provided\")\n################### Build url ######################\n# If topic is provided\nif topic is not None:\ntopic_url = topic + \" \"\nelse:\ntopic_url = \"\"\n# If source is provided\nif source is not None:\nsource_url = \" site:\" + source\nelse:\nsource_url = \"\"\n# If period is provided\nperiod_mappings = {\"Any time\": \"\",\n\"Past hour\": \" when:1h\",\n\"Past 24 hours\": \" when:1d\",\n\"Past week\": \" when:7d\",\n\"Past year\": \" when:1y\"}\nperiod_url = period_mappings[period]\nurl = self.__build_url(topic_url, source_url, period_url)\n################### Scrape ######################\narticles = self.__scrape_articles(url, number_of_articles)\n# Check and report if no articles found\nif articles is None:\nsys.stdout.write(\"No articles found. Try different parameters\")\nreturn []\n################### Build Articles ######################\nif article_text:\narticles = self.__build_list_of_articles(articles)\nreturn articles\n</code></pre>"},{"location":"tweeter/","title":"Tweeter Class","text":""},{"location":"tweeter/#twitternewsbot.tweeter.Tweeter","title":"Tweeter","text":"<p>API Object allowing users to tweet articles, summaries and other text to Twitter.  It leverages PaLM to summarize articles and then tweets them in chunks of 280 characters. The API keys required for the Twitter API must be provided as environment variables or as arguments to the constructor. The API key required for the Google API can be provided as environment variables or as an argument to the constructor.  The Google API key is optional. If not provided, the API will not be able to summarize articles.</p> ATTRIBUTE DESCRIPTION <code>__API_KEY</code> <p>The API key for the Twitter API</p> <p> TYPE: <code>str</code> </p> <code>__API_SECRET_KEY</code> <p>The API secret key for the Twitter API</p> <p> TYPE: <code>str</code> </p> <code>__ACCESS_TOKEN</code> <p>The access token for the Twitter API</p> <p> TYPE: <code>str</code> </p> <code>__ACCESS_TOKEN_SECRET</code> <p>The access token secret for the Twitter API</p> <p> TYPE: <code>str</code> </p> <code>__GOOGLE_API_KEY</code> <p>The API key for the Google API</p> <p> TYPE: <code>str</code> </p> <code>__client</code> <p>The tweepy client object</p> <p> TYPE: <code>Client</code> </p> Source code in <code>twitternewsbot/tweeter.py</code> <pre><code>class Tweeter():\n\"\"\"\n    API Object allowing users to tweet articles, summaries and other text to Twitter. \n    It leverages PaLM to summarize articles and then tweets them in chunks of 280 characters.\n    The API keys required for the Twitter API must be provided as environment variables or as arguments to the constructor.\n    The API key required for the Google API can be provided as environment variables or as an argument to the constructor. \n    The Google API key is optional. If not provided, the API will not be able to summarize articles.\n    Attributes\n    ----------\n    __API_KEY : str\n        The API key for the Twitter API\n    __API_SECRET_KEY : str\n        The API secret key for the Twitter API\n    __ACCESS_TOKEN : str\n        The access token for the Twitter API\n    __ACCESS_TOKEN_SECRET : str\n        The access token secret for the Twitter API\n    __GOOGLE_API_KEY : str\n        The API key for the Google API\n    __client : Client\n        The tweepy client object\n    \"\"\"\n#####################################\n# Initialization\n#####################################\ndef __init__(self, api_key: str|None = None, api_secret_key: str|None = None, access_token: str|None = None, access_token_secret: str|None = None, google_api_key: str|None = None):\n\"\"\"Initialize the class with tokens and tweepy client\n        Parameters\n        ----------\n        api_key : str, optional\n            The API key for the Twitter API, by default None\n        api_secret_key : str, optional\n            The API secret key for the Twitter API, by default None\n        access_token : str, optional\n            The access token for the Twitter API, by default None\n        access_token_secret : str, optional\n            The access token secret for the Twitter API, by default None\n        google_api_key : str, optional\n            The API key for the Google API, by default None\n        Raises\n        ------\n        Exception\n            If API_KEY is not found in environment variables and not provided as an argument\n        Exception\n            If API_SECRET_KEY is not found in environment variables and not provided as an argument\n        Exception\n            If ACCESS_TOKEN is not found in environment variables and not provided as an argument\n        Exception\n            If ACCESS_TOKEN_SECRET is not found in environment variables and not provided as an argument\n        Exception\n            Twitter API Authentication Failed. Invalid Twitter API Credentials\n        \"\"\"\n# Load environment variables\nload_dotenv()\nif api_key is None:\ntry:\nself.__API_KEY = os.getenv(\"API_KEY\")\nexcept:\nraise Exception(\"API_KEY not found in environment variables and not provided as an argument\")\nelse:\nself.__API_KEY = api_key\nif api_secret_key is None:\ntry:\nself.__API_SECRET_KEY = os.getenv(\"API_SECRET_KEY\")\nexcept:\nraise Exception(\"API_SECRET_KEY not found in environment variables and not provided as an argument\")\nelse:\nself.__API_SECRET_KEY = api_secret_key\nif access_token is None:\ntry:\nself.__ACCESS_TOKEN = os.getenv(\"ACCESS_TOKEN\")\nexcept:\nraise Exception(\"ACCESS_TOKEN not found in environment variables and not provided as an argument\")\nelse:\nself.__ACCESS_TOKEN = access_token\nif access_token_secret is None:\ntry:\nself.__ACCESS_TOKEN_SECRET = os.getenv(\"ACCESS_TOKEN_SECRET\")\nexcept:\nraise Exception(\"ACCESS_TOKEN_SECRET not found in environment variables and not provided as an argument\")\nelse:\nself.__ACCESS_TOKEN_SECRET = access_token_secret\nif google_api_key is None:\ntry:\nself.__GOOGLE_API_KEY = os.getenv(\"GOOGLE_API_KEY\")\nexcept:\npass\nelse:\nself.__GOOGLE_API_KEY = google_api_key\ntry:\nself.__client = Client(consumer_key=self.__API_KEY, \nconsumer_secret=self.__API_SECRET_KEY, \naccess_token=self.__ACCESS_TOKEN, \naccess_token_secret=self.__ACCESS_TOKEN_SECRET)\nexcept:\nraise Exception(\"Authentication Failed. Invalid Twitter API Credentials\")\n#####################################\n# Private Methods\n#####################################\ndef __tweet(self, text: str) -&gt; dict:\n\"\"\"Private: Tweet the given text\n        Parameters\n        ----------\n        text : str\n            The text to be tweeted\n        Returns\n        -------\n        dict\n            A dictionary containing the total character count, the number of tweets posted, and the id of the parent tweet\n        \"\"\"\n# Create chunks\ntotal_char_count = len(text)\ntext = list(self.__create_chunks(text))\nno_of_chunks = len(text)\n# Seperate parent tweet from children tweets\nparent_tweet_text = text[0]\nleaf_tweets = text[1:]\n# Post parent tweet\nparent_tweet_id = self.__parent_tweet(text=parent_tweet_text)\n# Post children tweets\nfor leaf_tweet in leaf_tweets:\nself.__child_tweet(text=leaf_tweet, parent_tweet_id=parent_tweet_id)\nreturn {\"Total Character Count\": total_char_count, \"No. of Tweets\": no_of_chunks, \"Parent Tweet ID\": parent_tweet_id}\ndef __parent_tweet(self, text: str) -&gt; str | None:\n\"\"\"Post the parent tweet and return the id of the tweet\n        Parameters\n        ----------\n        text : str\n            The text to be tweeted\n        Returns\n        -------\n        parent_tweet_id : str\n            The id of the tweet\n        \"\"\"\ntry:\nparent_tweet_id = self.__client.create_tweet(text=text).data['id']\nreturn parent_tweet_id\nexcept Exception as error:\nraise Exception(f\"Tweet not posted succesfully: {error}\")\ndef __child_tweet(self, text: str, parent_tweet_id: str) -&gt; None:\n\"\"\"Post the child tweet as a reply to the parent tweet\n        Parameters\n        ----------\n        text : str\n            The text to be tweeted as a reply to the parent tweet\n        parent_tweet_id : str\n            The id of the parent tweet\n        Returns\n        -------\n        None\n        \"\"\"\ntry:\nself.__client.create_tweet(text=text, in_reply_to_tweet_id=parent_tweet_id)\nexcept Exception as error:\nraise Exception(f\"Tweet not posted succesfully: {error}\")\ndef __create_chunks(self, text: str) -&gt; list:\n\"\"\"Create chunks of 280 characters each from the given text while leveraging the yield keyword\n        Parameters\n        ----------\n        text : str\n            The text to be chunked\n        Returns\n        -------\n        chunks : list(str)\n            A list of 280 char chunks of the given text\n        \"\"\"\nfor start in range(0, len(text), 280):\nyield text[start:start + 280]\ndef __summarize_article(self, article: dict, prompt: str|None) -&gt; str | None:\n\"\"\"Summarize the given article using Google PaLM API\n        Parameters\n        ----------\n        article : dict\n            A dictionary containing the title and article body of the news article\n        prompt : str, optional\n            The prompt to be used for the summarization, by default None\n        Returns\n        -------\n        summary : str\n            The summary of the article created using GOOGLE PaLM\n        \"\"\"\n# Get the API key\nif self.__GOOGLE_API_KEY is None:\nraise Exception(\"GOOGLE_API_KEY not found in environment variables\")\n# Initialize PaLM\ntry:\npalm.configure(api_key=self.__GOOGLE_API_KEY)\nexcept:\nraise Exception(\"Authentication Failed. Invalid Google API Credentials\")\n# Default Settings\ndefaults = {\n'model': 'models/text-bison-001',\n'temperature': 0.1,\n'candidate_count': 1,\n'top_k': 40,\n'top_p': 0.95,\n'max_output_tokens': 1024,\n'stop_sequences': [],\n'safety_settings': [{\"category\":\"HARM_CATEGORY_DEROGATORY\",\"threshold\":1},{\"category\":\"HARM_CATEGORY_TOXICITY\",\"threshold\":1},{\"category\":\"HARM_CATEGORY_VIOLENCE\",\"threshold\":2},{\"category\":\"HARM_CATEGORY_SEXUAL\",\"threshold\":2},{\"category\":\"HARM_CATEGORY_MEDICAL\",\"threshold\":2},{\"category\":\"HARM_CATEGORY_DANGEROUS\",\"threshold\":2}],\n}\n# Create a prompt\nprompt = f\"\"\"\n        Summarize the following article and condense it into 2 bullet points. Add the title of the article at the top. Do not leave an empty line after the article. Only use information from the article provided below. Structure your response as follows:\n        Format for Summary:\n        Title\n        - Bullet point 1\n        - Bullet point 2\n        Title - {article['title']}\n        Article - {article['article']}\n        Summary:\n        \"\"\" if prompt is None else f\"\"\"{prompt}\"\"\"\n# Generate the tweet\ntry:\ntweet = palm.generate_text(**defaults, prompt=prompt)\nreturn tweet.result\nexcept:\nraise Exception(\"Failed to generate tweet using PaLM\")\ndef __clean_tweet(self, tweet_text: str) -&gt; str:\n\"\"\"Clean the tweet by removing unwanted characters as PaLM adds '*' to the tweet occasionally\n        Parameters\n        ----------\n        tweet_text : str\n            The text of the tweet to be cleaned\n        Returns\n        -------\n        tweet_text : str\n            The cleaned tweet text\n        \"\"\"\n# Remove * from tweet\ntweet_text = tweet_text.replace('*', '')\nreturn tweet_text\ndef __handle_articles_list(self, articles_list: list, title: str|None, prompt: str|None) -&gt; str | None:\n\"\"\"Handle the list of articles by summarizing them and returning a generated tweet\n        Parameters\n        ----------\n        articles_list : list(dict)\n            A list of dictionaries containing the title, source, date and link of the articles\n        title : str, optional\n            The title of the tweet\n        prompt : str, optional\n            The prompt to be used for the summarization, by default None\n        Returns\n        -------\n        articles_generated_summary : str\n            The generated tweet from the articles\n        \"\"\"\n# Add title of tweet to the beginning of the tweet\narticles_generated_summary = f\"{title}:\\n\\n\"\n# Add the summary for each article to the tweet\nfor article in articles_list:\n# Call API to get summary\nsummary = self.__summarize_article(article, prompt)\n# If summary is None, continue by skipping article\nif summary is None:\ncontinue\n# Clean the summary\narticles_generated_summary += self.__clean_tweet(summary)\n# Add a new line, formatting\narticles_generated_summary += \"\\n\\n\"\n# Return the generated summary\nreturn articles_generated_summary\ndef __generate_with_palm(self, prompt: str|None) -&gt; str | None:\n\"\"\"Generate a tweet using PaLM\n        Parameters\n        ----------\n        prompt : str, optional\n            The prompt to be used for generation, by default None\n        to_rewrite : str, optional\n            The text to be rewritten, by default None\n        Returns\n        -------\n        generated_summary : str\n            The generated tweet\n        \"\"\"\n# Get the API key\ntry:\nGOOGLE_API_KEY = os.environ['GOOGLE_API_KEY']\nexcept:\nraise Exception(\"GOOGLE_API_KEY not found in environment variables\")\n# Initialize PaLM\ntry:\npalm.configure(api_key=GOOGLE_API_KEY)\nexcept:\nraise Exception(\"Authentication Failed. Invalid Google API Credentials\")\n# Default Settings\ndefaults = {\n'model': 'models/text-bison-001',\n'temperature': 0.1,\n'candidate_count': 1,\n'top_k': 40,\n'top_p': 0.95,\n'max_output_tokens': 1024,\n'stop_sequences': [],\n'safety_settings': [{\"category\":\"HARM_CATEGORY_DEROGATORY\",\"threshold\":1},{\"category\":\"HARM_CATEGORY_TOXICITY\",\"threshold\":1},{\"category\":\"HARM_CATEGORY_VIOLENCE\",\"threshold\":2},{\"category\":\"HARM_CATEGORY_SEXUAL\",\"threshold\":2},{\"category\":\"HARM_CATEGORY_MEDICAL\",\"threshold\":2},{\"category\":\"HARM_CATEGORY_DANGEROUS\",\"threshold\":2}],\n}\n# Generate the tweet\ntry:\ntweet = palm.generate_text(**defaults, prompt=prompt)\nreturn tweet.result\nexcept:\nraise Exception(\"Failed to generate tweet using PaLM\")\n#####################################\n# Public Methods - API Methods\n#####################################\ndef get_client(self) -&gt; Client:\n\"\"\"Get the tweepy client object\n        Returns\n        -------\n        client : Client\n            The tweepy client object\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n        &gt;&gt;&gt; tweeter = Tweeter()\n        &gt;&gt;&gt; client = tweeter.get_client() # Retrieve your tweety client object\n        &gt;&gt;&gt; client.create_tweet(text=\"Hello World!\") # Tweet Hello World using your account's client\n        \"\"\"\nreturn self.__client\ndef tweet(self, title: str|None = None, tweet: str|None = None, articles_list: list|None = None, use_palm: bool = False, prompt: str|None = None) -&gt; dict:\n\"\"\"Tweet the given articles list\n        Parameters\n        ----------\n        title : str, optional\n            The title of the tweet\n        tweet : str, optional\n            The tweet to be posted\n        articles_list : list, optional\n            A list of dictionaries containing the title, source, link and text of the articles.\n            Obtained from the NewsFinder.get_news_articles() method\n        use_palm : bool, optional\n            A boolean value indicating whether to use PaLM to generate tweet with prompt\n        prompt : str, optional\n            The prompt to be used for the summarization with PaLM\n        Returns\n        -------\n        tweet : dict\n            A dictionary containing the total character count, the number of tweets posted, and the id of the parent tweet\n        Raises\n        ------\n        TypeError\n            If title is not a string\n        TypeError\n            If tweet is not a string\n        TypeError\n            If articles_list is not a list of dictionaries\n        TypeError\n            If use_palm is not a boolean\n        ValueError\n            If use_palm is True and tweet or articles_list is not None\n        ValueError\n            If use_palm is True and prompt is None\n        ValueError\n            If tweet and articles_list are both not None\n        TypeError\n            If prompt is not a string\n        Examples\n        --------\n        Provide a title and tweet to be posted:\n        &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n        &gt;&gt;&gt; tweeter = Tweeter()\n        &gt;&gt;&gt; tweeter.tweet(title=\"Hello World\", tweet=\"Hello World!\")\n        Provide a title and articles list to be posted:\n        &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; tweeter = Tweeter()\n        &gt;&gt;&gt; newsfinder = NewsFinder()\n        &gt;&gt;&gt; articles_list = newsfinder.get_news_articles(topic=\"Bitcoin\", num_articles=5, article_text=True) # Article Text must be True if summarizing articles\n        &gt;&gt;&gt; tweeter.tweet(title=\"Bitcoin News\", articles_list=articles_list)\n        Provide a prompt to be used with PaLM to generate a tweet:\n        &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n        &gt;&gt;&gt; tweeter = Tweeter()\n        &gt;&gt;&gt; tweeter.tweet(title=\"AI\", use_palm=True, prompt=\"Create a 50 word description of what Artificial Intelligence is.\")\n        \"\"\"\n# Check if title is valid\nif title is not None and not isinstance(title, str):\nraise TypeError(\"title must be a string\")\n# Check if tweet is valid\nif tweet is not None and not isinstance(tweet, str):\nraise TypeError(\"tweet must be a string\")\n# Check if articles_list is valid\nif articles_list is not None and (not isinstance(articles_list, list) or not all(isinstance(article, dict) for article in articles_list)):\nraise TypeError(\"articles_list must be a list of dicts\")\n# Check if use_palm is valid\nif use_palm is not None and not isinstance(use_palm, bool):\nraise TypeError(\"use_palm must be a boolean\")\n# Check if use_palm is True, then tweet and articles_list must be None\nif use_palm is True and (tweet is not None or articles_list is not None):\nraise ValueError(\"tweet and articles_list must be None if use_palm is True\")\n# Check if prompt is not provided and use_palm is True\nif prompt is None and use_palm is True:\nraise ValueError(\"prompt must be provided if use_palm is True\")\n# Check if tweet and articles_list are both provided\nif tweet is not None and articles_list is not None:\nraise ValueError(\"Both tweet and articles_list cannot be provided\")\n# Check if prompt is valid\nif prompt is not None and not isinstance(prompt, str):\nraise TypeError(\"prompt must be a string\")\nif articles_list is not None:\n# Handle the articles list\ntweet = self.__handle_articles_list(articles_list, title, prompt)\nelif use_palm:\n# Generate a tweet using PaLM\ntweet = self.__generate_with_palm(prompt)\nif title is not None:\ntweet = f\"{title}:\\n\\n{tweet}\"\nreturn self.__tweet(tweet)\n</code></pre>"},{"location":"tweeter/#twitternewsbot.tweeter.Tweeter.get_client","title":"get_client","text":"<pre><code>get_client()\n</code></pre> <p>Get the tweepy client object</p> RETURNS DESCRIPTION <code>client</code> <p>The tweepy client object</p> <p> TYPE: <code>Client</code> </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n&gt;&gt;&gt; tweeter = Tweeter()\n&gt;&gt;&gt; client = tweeter.get_client() # Retrieve your tweety client object\n&gt;&gt;&gt; client.create_tweet(text=\"Hello World!\") # Tweet Hello World using your account's client\n</code></pre> Source code in <code>twitternewsbot/tweeter.py</code> <pre><code>def get_client(self) -&gt; Client:\n\"\"\"Get the tweepy client object\n    Returns\n    -------\n    client : Client\n        The tweepy client object\n    Examples\n    --------\n    &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n    &gt;&gt;&gt; tweeter = Tweeter()\n    &gt;&gt;&gt; client = tweeter.get_client() # Retrieve your tweety client object\n    &gt;&gt;&gt; client.create_tweet(text=\"Hello World!\") # Tweet Hello World using your account's client\n    \"\"\"\nreturn self.__client\n</code></pre>"},{"location":"tweeter/#twitternewsbot.tweeter.Tweeter.tweet","title":"tweet","text":"<pre><code>tweet(title=None, tweet=None, articles_list=None, use_palm=False, prompt=None)\n</code></pre> <p>Tweet the given articles list</p> PARAMETER  DESCRIPTION <code>title</code> <p>The title of the tweet</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>tweet</code> <p>The tweet to be posted</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>articles_list</code> <p>A list of dictionaries containing the title, source, link and text of the articles. Obtained from the NewsFinder.get_news_articles() method</p> <p> TYPE: <code>list</code> DEFAULT: <code>None</code> </p> <code>use_palm</code> <p>A boolean value indicating whether to use PaLM to generate tweet with prompt</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>prompt</code> <p>The prompt to be used for the summarization with PaLM</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>tweet</code> <p>A dictionary containing the total character count, the number of tweets posted, and the id of the parent tweet</p> <p> TYPE: <code>dict</code> </p> RAISES DESCRIPTION <code>TypeError</code> <p>If title is not a string</p> <code>TypeError</code> <p>If tweet is not a string</p> <code>TypeError</code> <p>If articles_list is not a list of dictionaries</p> <code>TypeError</code> <p>If use_palm is not a boolean</p> <code>ValueError</code> <p>If use_palm is True and tweet or articles_list is not None</p> <code>ValueError</code> <p>If use_palm is True and prompt is None</p> <code>ValueError</code> <p>If tweet and articles_list are both not None</p> <code>TypeError</code> <p>If prompt is not a string</p> <p>Examples:</p> <p>Provide a title and tweet to be posted:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n&gt;&gt;&gt; tweeter = Tweeter()\n&gt;&gt;&gt; tweeter.tweet(title=\"Hello World\", tweet=\"Hello World!\")\n</code></pre> <p>Provide a title and articles list to be posted:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; tweeter = Tweeter()\n&gt;&gt;&gt; newsfinder = NewsFinder()\n&gt;&gt;&gt; articles_list = newsfinder.get_news_articles(topic=\"Bitcoin\", num_articles=5, article_text=True) # Article Text must be True if summarizing articles\n&gt;&gt;&gt; tweeter.tweet(title=\"Bitcoin News\", articles_list=articles_list)\n</code></pre> <p>Provide a prompt to be used with PaLM to generate a tweet:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n&gt;&gt;&gt; tweeter = Tweeter()\n&gt;&gt;&gt; tweeter.tweet(title=\"AI\", use_palm=True, prompt=\"Create a 50 word description of what Artificial Intelligence is.\")\n</code></pre> Source code in <code>twitternewsbot/tweeter.py</code> <pre><code>def tweet(self, title: str|None = None, tweet: str|None = None, articles_list: list|None = None, use_palm: bool = False, prompt: str|None = None) -&gt; dict:\n\"\"\"Tweet the given articles list\n    Parameters\n    ----------\n    title : str, optional\n        The title of the tweet\n    tweet : str, optional\n        The tweet to be posted\n    articles_list : list, optional\n        A list of dictionaries containing the title, source, link and text of the articles.\n        Obtained from the NewsFinder.get_news_articles() method\n    use_palm : bool, optional\n        A boolean value indicating whether to use PaLM to generate tweet with prompt\n    prompt : str, optional\n        The prompt to be used for the summarization with PaLM\n    Returns\n    -------\n    tweet : dict\n        A dictionary containing the total character count, the number of tweets posted, and the id of the parent tweet\n    Raises\n    ------\n    TypeError\n        If title is not a string\n    TypeError\n        If tweet is not a string\n    TypeError\n        If articles_list is not a list of dictionaries\n    TypeError\n        If use_palm is not a boolean\n    ValueError\n        If use_palm is True and tweet or articles_list is not None\n    ValueError\n        If use_palm is True and prompt is None\n    ValueError\n        If tweet and articles_list are both not None\n    TypeError\n        If prompt is not a string\n    Examples\n    --------\n    Provide a title and tweet to be posted:\n    &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n    &gt;&gt;&gt; tweeter = Tweeter()\n    &gt;&gt;&gt; tweeter.tweet(title=\"Hello World\", tweet=\"Hello World!\")\n    Provide a title and articles list to be posted:\n    &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n    &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n    &gt;&gt;&gt; tweeter = Tweeter()\n    &gt;&gt;&gt; newsfinder = NewsFinder()\n    &gt;&gt;&gt; articles_list = newsfinder.get_news_articles(topic=\"Bitcoin\", num_articles=5, article_text=True) # Article Text must be True if summarizing articles\n    &gt;&gt;&gt; tweeter.tweet(title=\"Bitcoin News\", articles_list=articles_list)\n    Provide a prompt to be used with PaLM to generate a tweet:\n    &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n    &gt;&gt;&gt; tweeter = Tweeter()\n    &gt;&gt;&gt; tweeter.tweet(title=\"AI\", use_palm=True, prompt=\"Create a 50 word description of what Artificial Intelligence is.\")\n    \"\"\"\n# Check if title is valid\nif title is not None and not isinstance(title, str):\nraise TypeError(\"title must be a string\")\n# Check if tweet is valid\nif tweet is not None and not isinstance(tweet, str):\nraise TypeError(\"tweet must be a string\")\n# Check if articles_list is valid\nif articles_list is not None and (not isinstance(articles_list, list) or not all(isinstance(article, dict) for article in articles_list)):\nraise TypeError(\"articles_list must be a list of dicts\")\n# Check if use_palm is valid\nif use_palm is not None and not isinstance(use_palm, bool):\nraise TypeError(\"use_palm must be a boolean\")\n# Check if use_palm is True, then tweet and articles_list must be None\nif use_palm is True and (tweet is not None or articles_list is not None):\nraise ValueError(\"tweet and articles_list must be None if use_palm is True\")\n# Check if prompt is not provided and use_palm is True\nif prompt is None and use_palm is True:\nraise ValueError(\"prompt must be provided if use_palm is True\")\n# Check if tweet and articles_list are both provided\nif tweet is not None and articles_list is not None:\nraise ValueError(\"Both tweet and articles_list cannot be provided\")\n# Check if prompt is valid\nif prompt is not None and not isinstance(prompt, str):\nraise TypeError(\"prompt must be a string\")\nif articles_list is not None:\n# Handle the articles list\ntweet = self.__handle_articles_list(articles_list, title, prompt)\nelif use_palm:\n# Generate a tweet using PaLM\ntweet = self.__generate_with_palm(prompt)\nif title is not None:\ntweet = f\"{title}:\\n\\n{tweet}\"\nreturn self.__tweet(tweet)\n</code></pre>"},{"location":"twitternewsbot/","title":"Twitter News Bot Class","text":""},{"location":"twitternewsbot/#twitternewsbot.twitternewsbot.TwitterNewsBot","title":"TwitterNewsBot","text":"<p>API Object to connect the NewsFinder and Tweeter classes to build a pipeline to automate finding, scraping and tweeting news.</p> ATTRIBUTE DESCRIPTION <code>news_finder</code> <p>The NewsFinder object to use to find and scrape news articles</p> <p> TYPE: <code>NewsFinder</code> </p> <code>tweeter_obj</code> <p>The Tweeter object to use to tweet the news articles</p> <p> TYPE: <code>Tweeter</code> </p> <code>topic</code> <p>The topic to search for news articles</p> <p> TYPE: <code>str</code> </p> <code>no_of_articles</code> <p>The number of articles to find and scrape, by default 5</p> <p> TYPE: <code>int</code> </p> Source code in <code>twitternewsbot/twitternewsbot.py</code> <pre><code>class TwitterNewsBot():\n\"\"\"\n    API Object to connect the NewsFinder and Tweeter classes to build a pipeline to automate finding, scraping and tweeting news.\n    Attributes\n    ----------\n    news_finder : NewsFinder\n        The NewsFinder object to use to find and scrape news articles\n    tweeter_obj : Tweeter\n        The Tweeter object to use to tweet the news articles\n    topic : str\n        The topic to search for news articles\n    no_of_articles : int\n        The number of articles to find and scrape, by default 5    \n    \"\"\"\n#####################################\n# Initialization\n#####################################\ndef __init__(self, news_finder: NewsFinder, tweeter_obj: Tweeter, topic: str, no_of_articles: int = 5):\n\"\"\"Initialize the Bot class\n        Parameters\n        ----------\n        news_finder : NewsFinder\n            The NewsFinder object to use to find and scrape news articles\n        tweeter_obj : Tweeter\n            The Tweeter object to use to tweet the news articles\n        topic : str\n            The topic to search for news articles\n        no_of_articles : int, optional\n            The number of articles to find and scrape, by default 5\n        Returns\n        -------\n        None\n        Raises\n        ------\n        TypeError\n            If news_finder is not a NewsFinder object\n            If tweeter_obj is not a Tweeter object\n            If topic is not a string\n            If no_of_articles is not an integer\n        \"\"\"\n# Check if news_finder is a NewsFinder object\nif not isinstance(news_finder, NewsFinder):\nraise TypeError(\"news_finder must be a NewsFinder object\")\n# Check if tweeter_obj is a Tweeter object\nif not isinstance(tweeter_obj, Tweeter):\nraise TypeError(\"tweeter_obj must be a Tweeter object\")\n# Check if topic is a string\nif not isinstance(topic, str):\nraise TypeError(\"topic must be a string\")\n# Check if no_of_articles is an integer\nif not isinstance(no_of_articles, int):\nraise TypeError(\"no_of_articles must be an integer\")\n# Set the attributes\nself.news_finder = news_finder\nself.tweeter_obj = tweeter_obj\nself.__topic = topic\nself.__no_of_articles = no_of_articles\n#####################################\n# Private Methods\n#####################################\ndef __build_pipeline(self, **kwargs) -&gt; dict:\n\"\"\"Private: Build the pipeline to find, scrape and tweet news articles\n        Parameters\n        ----------\n        **kwargs : dict\n            Arguments for Tweeter.tweet function excluding articles_list. See Tweeter.tweet for more details on the args. \n        Returns\n        -------\n        dict\n            A dictionary containing the total character count, the number of tweets posted, and the id of the parent tweet when run\n        \"\"\"\n# Build the pipeline\narticles = self.news_finder.get_news_articles(topic=self.__topic,number_of_articles=self.__no_of_articles, article_text=True)\nreturn self.tweeter_obj.tweet(articles_list=articles, **kwargs)\n###############################\n# Public Methods - API Methods\n###############################\n@property\ndef topic(self) -&gt; str:\n\"\"\"Returns the topic to search for news articles\n        Returns\n        -------\n        str\n            The topic to search for news articles\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.twitternewsbot import TwitterNewsBot\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n        &gt;&gt;&gt; bot = TwitterNewsBot(NewsFinder(), Tweeter(), \"Python\")\n        &gt;&gt;&gt; bot.topic\n        \"Python\"\n        \"\"\"\nreturn self.__topic\n@topic.setter\ndef topic(self, topic: str) -&gt; None:\n\"\"\"Sets the topic to search for news articles\n        Parameters\n        ----------\n        topic : str\n            The topic to search for news articles\n        Raises\n        ------\n        TypeError\n            If topic is not a string\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.twitternewsbot import TwitterNewsBot\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n        &gt;&gt;&gt; bot = TwitterNewsBot(NewsFinder(), Tweeter(), \"Python\")\n        &gt;&gt;&gt; bot.topic = \"HTML\"\n        \"\"\"\n# Check if topic is a string\nif not isinstance(topic, str):\nraise TypeError(\"topic must be a string\")\nself.__topic = topic\nreturn self.__topic\n@property\ndef no_of_articles(self) -&gt; int:\n\"\"\"Returns the number of articles to find and scrape\n        Returns\n        -------\n        int\n            The number of articles to find and scrape\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.twitternewsbot import TwitterNewsBot\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n        &gt;&gt;&gt; bot = TwitterNewsBot(NewsFinder(), Tweeter(), \"Python\")\n        &gt;&gt;&gt; bot.no_of_articles\n        5\n        \"\"\"\nreturn self.__no_of_articles\n@no_of_articles.setter\ndef no_of_articles(self, no_of_articles: int) -&gt; None:\n\"\"\"Sets the number of articles to find and scrape\n        Parameters\n        ----------\n        no_of_articles : int\n            The number of articles to find and scrape\n        Returns\n        -------\n        None\n        Raises\n        ------\n        TypeError\n            If no_of_articles is not an integer\n        Examples\n        --------\n        &gt;&gt;&gt; from twitternewsbot.twitternewsbot import TwitterNewsBot\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n        &gt;&gt;&gt; bot = TwitterNewsBot(NewsFinder(), Tweeter(), \"Python\")\n        &gt;&gt;&gt; bot.no_of_articles = 10\n        \"\"\"\n# Check if no_of_articles is an integer\nif not isinstance(no_of_articles, int):\nraise TypeError(\"no_of_articles must be an integer\")\nself.__no_of_articles = no_of_articles\ndef run(self, **kwargs) -&gt; dict:\n\"\"\"\n        Build article list, scrape articles and tweet summarized tweet for the given topic.\n        Parameters\n        ----------\n        **kwargs : dict\n            Arguments for Tweeter.tweet function excluding articles_list. See Tweeter.tweet for more details on the args.\n        Returns\n        -------\n        dict\n            A dictionary containing the total character count, the number of tweets posted, and the id of the parent tweet when run\n        Examples\n        --------\n        Creating a basic pipeline to find, scrape and tweet news articles:\n        &gt;&gt;&gt; from twitternewsbot.twitternewsbot import TwitterNewsBot\n        &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n        &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n        &gt;&gt;&gt; bot = TwitterNewsBot(NewsFinder(), Tweeter(), \"Python\")\n        &gt;&gt;&gt; bot.run()\n        \"\"\"\n# Run the pipeline\nreturn self.__build_pipeline(**kwargs)\n</code></pre>"},{"location":"twitternewsbot/#twitternewsbot.twitternewsbot.TwitterNewsBot.topic","title":"topic  <code>property</code> <code>writable</code>","text":"<pre><code>topic: str\n</code></pre> <p>Returns the topic to search for news articles</p> RETURNS DESCRIPTION <code>str</code> <p>The topic to search for news articles</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.twitternewsbot import TwitterNewsBot\n&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n&gt;&gt;&gt; bot = TwitterNewsBot(NewsFinder(), Tweeter(), \"Python\")\n&gt;&gt;&gt; bot.topic\n\"Python\"\n</code></pre>"},{"location":"twitternewsbot/#twitternewsbot.twitternewsbot.TwitterNewsBot.no_of_articles","title":"no_of_articles  <code>property</code> <code>writable</code>","text":"<pre><code>no_of_articles: int\n</code></pre> <p>Returns the number of articles to find and scrape</p> RETURNS DESCRIPTION <code>int</code> <p>The number of articles to find and scrape</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.twitternewsbot import TwitterNewsBot\n&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n&gt;&gt;&gt; bot = TwitterNewsBot(NewsFinder(), Tweeter(), \"Python\")\n&gt;&gt;&gt; bot.no_of_articles\n5\n</code></pre>"},{"location":"twitternewsbot/#twitternewsbot.twitternewsbot.TwitterNewsBot.run","title":"run","text":"<pre><code>run(**kwargs)\n</code></pre> <p>Build article list, scrape articles and tweet summarized tweet for the given topic.</p> PARAMETER  DESCRIPTION <code>**kwargs</code> <p>Arguments for Tweeter.tweet function excluding articles_list. See Tweeter.tweet for more details on the args.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing the total character count, the number of tweets posted, and the id of the parent tweet when run</p> <p>Examples:</p> <p>Creating a basic pipeline to find, scrape and tweet news articles:</p> <pre><code>&gt;&gt;&gt; from twitternewsbot.twitternewsbot import TwitterNewsBot\n&gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n&gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n&gt;&gt;&gt; bot = TwitterNewsBot(NewsFinder(), Tweeter(), \"Python\")\n&gt;&gt;&gt; bot.run()\n</code></pre> Source code in <code>twitternewsbot/twitternewsbot.py</code> <pre><code>def run(self, **kwargs) -&gt; dict:\n\"\"\"\n    Build article list, scrape articles and tweet summarized tweet for the given topic.\n    Parameters\n    ----------\n    **kwargs : dict\n        Arguments for Tweeter.tweet function excluding articles_list. See Tweeter.tweet for more details on the args.\n    Returns\n    -------\n    dict\n        A dictionary containing the total character count, the number of tweets posted, and the id of the parent tweet when run\n    Examples\n    --------\n    Creating a basic pipeline to find, scrape and tweet news articles:\n    &gt;&gt;&gt; from twitternewsbot.twitternewsbot import TwitterNewsBot\n    &gt;&gt;&gt; from twitternewsbot.newsfinder import NewsFinder\n    &gt;&gt;&gt; from twitternewsbot.tweeter import Tweeter\n    &gt;&gt;&gt; bot = TwitterNewsBot(NewsFinder(), Tweeter(), \"Python\")\n    &gt;&gt;&gt; bot.run()\n    \"\"\"\n# Run the pipeline\nreturn self.__build_pipeline(**kwargs)\n</code></pre>"}]}